string->functions

primer, ch.11

defined in <string.h>
see also: primer, ch.11, p.489ff.

(1) length
    - strlen() returns length of a string
    - excluding the terminating null byte ('\0')
(2) concatenation
    - strcat() (2.1)
        - takes two strings as args
        - modifies 1st string (but not 2nd string)
        - returns address of 1st char of 1st string (char *)
    - strncat() (2.2)
        - checks whether 2nd string fits in 1st string/array (unlike 2.1)
        - 3rd arg: max num of chars to be added
            - stops concatenating if max or \0 reached
            - 1st arg-array should be large enough to hold max num plus one \0
(3) comparison
    - strcmp() (3.1)
        - compares string contents (not string addresses)
        - can be used to compare strings stored in arrays of different sizes
        - returns 0, if its two string-args are the same
        - otherwise, returns non-zero (according to ASCII)
            - negative: if 1st string comes before the 2nd alphabetically
            - positive: if 2nd string comes before the 1st
    - strncmp() (3.2)
        - compares string until it has compared a specified num of chars (3rd arg)
(4) copy
    - strcpy() (4.1)
        - copies string itself (not address of a string)
        - string-equivalent of the assignment-operator
        - takes two string-pointers as args
            - 1st arg: target (copy)
                - should point to a data-obj, such as an array with enough space
                - needs not point to beginning of an array (for partly copying)
            - 2nd arg: source (original string)
                - can be a delared pointer, an array-name, or a string-constant
        - returns val of its 1st arg, the address of a char
    - strncopy() (4.2)
        - checks whether source (2nd arg) fits into target (1st arg)
        - 3rd arg: max num of chars to copy
        - copies up to max chars or up through \0 (whichever comes first)
            - if source is less than max, then the entire string is copied incl. \0
            - if source is more than max, no \0 is added
(5) combination
    - sprintf()
        - like printf(), but writes to a string (instead of writing to a display)
        - 1st arg: address of target string
        - 2nd arg: conversion specification
        - remaining args: list of items to be written
(6) search
    - strchr()
        - char *strchr(const char * s, int c);
        - returns pointer to the 1st loc in string s that holds the char c
        - if not found, returns null-pointer
    - strpbrk()
        - char *strpbrk(const char * s1, const char * s2);
        - returns pointer to the 1st loc in string s1 that holds any char found in s2
    - strstr()
        - char *strstr(const char * s1, const char * s2);
        - returns pointer to the 1st occurence of string s2 in string s1

EXAMPLE
(1)
printf("%d", (int) strlen("Joe Doe")); // 7
(2.1)
char first[] = "Joe";
char last[] = "Doe";
char *name = strcat(first, last);
printf("%p, %s\n", name, name); // address, JoeDoe
puts(first); // JoeDoe
puts(last); // Doe
(2.2)
char *name = strncat(first, last, 10);
(3.1)
#define SIZE 12
#define ANSWER "Heisenberg\n"
char try[SIZE];
printf("Say my name.\n");
fgets(try, SIZE, stdin);
if (strcmp(try, ANSWER) == 0) puts("You're damn right.");
else puts("Nope.");
(3.2)
if (strncmp(try, ANSWER, SIZE - 1) == 0) puts("You're damn right.");
(4.1)
char target[SIZE] = "Joe Doe";
strcpy(target + 3, "y");
puts(target); // Joey
(4.2)
strncpy(target + 3, "yyyyyyyy", strlen(target) - 3); // Joeyyyy
(5)
char target[SIZE];
sprintf(target, "%s, %-10s: $%.2f\n", "Doe", "Joe", 6.666);
puts(target); // Doe, Joe       : $6.67
