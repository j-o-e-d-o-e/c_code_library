thread



- since C11: optional feature
    - if C11+ compiler defines __STDC_NO_THREADS, not supported
- defined in [threads.h]
- thrd_create(thrd_t *t, thrd_start_t f, void *arg)
    - creates a new thread
    - t: unique identifier for new thread
    - f: pointer to a func to run (f)
        - thread_local: additional specifier for static vars with block-scope
            - to avoid race-conditions between threads
    - arg: pointer to arg to pass to the func
        - NULL, if no args
- thrd_join(thrd_t t, int *ret)
    - makes calling thread (e.g. main()) wait/block until child-thread t completes (joining)
        - generally, one must join threads to clean up (otherwise mem-leak)
    - t: unique identifier of thread
    - ret: return value
- thrd_detach()
    - makes calling thread not to block (instead of thrd_join())

- SEE ALSO
    - beej, ch.39/47

EXAMPLE
#include <stdio.h>
#include <threads.h>
#include <malloc.h>
#define THREAD_COUNT 5

int run(void *arg) {
    int i = *(int *) arg;
    free(arg);
    thread_local static int x = 42;
    printf("THREAD %d: running! %d\n", i, x++);
    return i;
}
int main(void) {
    thrd_t threads[THREAD_COUNT];
    printf("Launching threads...\n");
    for (int i = 0; i < THREAD_COUNT; i++) {
        int *arg = malloc(sizeof *arg);
        *arg = i;
        thrd_create(threads + i, run, arg);
    }
    printf("Waiting for thread to complete...\n");
    for (int i = 0; i < THREAD_COUNT; i++) {
        int res;
        if (i == 2) {
            thrd_detach(threads[i]);
            printf("Thread %d detached...\n", i);
        } else {
            thrd_join(threads[i], &res);
            printf("Thread %d complete!\n", res);
        }
    }
    printf("All threads complete!\n");
}
