pointer->array



(1) name of array == address of 1st elem
    - same address
    - and, name + i == &name[i]
(2) ar[i] == *(ar + i)
    - same val
(3) C guarantees that when it allocates space for an array
    - a pointer to the 1st location after the end of the array is a valid pointer
(4) declaring array params
    - C interprets `int ar[]` to mean the same as `int *ar`
    - that is, `ar` is of type pointer-to-int

- SEE ALSO
    - primer, ch.10
    - /exercism/c/pascals-triangle-without-zeros (double pointer to 2-dim-array)

EXAMPLE
#define SIZE 3
int sum(int *arr) {         // equivalent to: int sum(int arr[])
    int total = 0;
    int *end = arr + SIZE;  // end points to loc after final arr-elem
    while (arr < end) {
        total += *arr;
        arr++;
    }
    return total;
}
int main(void) {
    int res = sum((int[SIZE]) {1, 2, 3});
    printf("sum: %d", res); // sum: 6
}
