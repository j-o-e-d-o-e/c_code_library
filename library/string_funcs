string->funcs

built-in funcs

- defined in [string.h]
(1) length
    - strlen(const char *s) returns length of a s
    - excluding the terminating null byte ('\0')
(2) concatenate
    - strcat(char *dest, const char *src)
        - modifies dest (but not src)
        - returns pointer to the resulting string dest
    - strncat(char *dest, const char *src, size_t n)
        - checks whether src fits in dest (unlike strcat())
        - n: max num of chars to be added
            - stops concatenating if max or \0 reached
            - dest should be large enough to hold max num plus one \0
(3) compare
    - strcmp(const char *s1, const char *s2)
        - compares string contents (not string addresses)
        - can be used to compare strings stored in arrays of different sizes
        - returns 0, if s1 and s2 are equal
        - otherwise, returns non-zero (according to ASCII)
            - negative: if s1 comes before s2 alphabetically
            - positive: if s2 comes before s1
    - strncmp(const char *s1, const char *s2, size_t n)
        - compares strings until it has compared n chars
(4) copy
    - strcpy(char *dest, const char *src)
        - copies string itself (not address of a string)
        - string-equivalent of the assignment-operator
        - dest: target (copy)
            - should point to a data structure with enough space
            - needs not point to beginning of an array (for partly copying)
        - src: source (original string)
            - may be a declared pointer, an array-name, or a string-constant
        - returns pointer to the resulting string dest
    - strncopy(char *dest, const char *src, size_t n)
        - checks whether src fits into dest
        - n: max num of chars to be copied
        - copies up to max chars or up through \0 (whichever comes first)
            - if source is less than max, then the entire string is copied incl. \0
            - if source is more than max, no \0 is added
    - strdup(const char *s)
        - returns duplicate of s
        - `man strdup`
(5) combine
    - sprintf(char *s, const char *format, ...)
        - like printf(), but writes to a string (instead of stdout)
        - s: address of target string
        - format: conversion specification
        - remaining args: list of items to be written
        - returns the number of chars printed
(6) search
    - strchr(const char *s, int c);
        - returns pointer to the 1st loc in s that holds c
        - if not found, returns null-pointer
    - strpbrk(const char *s1, const char *s2);
        - returns pointer to the 1st loc in s1 that holds any char found in s2
    - strstr(const char *s1, const char *s2);
        - returns pointer to the 1st occurrence of s2 in s1
        - manipulates input-string
(7) convert
    - strtol(const char *str, char **endptr, int base) converts initial part of str to a long-int
    - strtod(const char *str, char **endptr) converts str to double
(8) strtok(char *str, const char *delim) breaks str into tokens using a delim
    - returns ptr to 1st token found in str
    - modifies input-str (in-place)
    - places \0 after token (where delimiter used to be)
    - first time, pass input-string; subsequent calls, pass NULL
        - strtok() remembers original str
    - delim-string can contain mulitple chars
        - but input-str is validated against each char (not string as a whole)

- SEE ALSO
    - primer, ch.11, p.489ff.
    - modern, lvl.1.8.4
    - tutorialspoint.com/c_standard_library/c_function_strtok

EXAMPLE
#define SIZE 30
(1)
printf("%d", (int) strlen("Joe Doe")); // 7
(2)
char first[] = "Joe";
char last[] = "Doe";
char *name = strcat(first, last);
printf("%p, %s\n", name, name); // address, JoeDoe
puts(first);                    // JoeDoe
puts(last);                     // Doe

(3)
#define ANSWER "Heisenberg\n"
char try[SIZE];
printf("Say my name.\n");
fgets(try, SIZE, stdin);
if (strcmp(try, ANSWER) == 0) puts("You're damn right.");
else puts("Nope.");

(4)
char target[SIZE] = "Joe Doe";
strcpy(target + 3, "y");
puts(target);     // Joey

(5)
char target[SIZE];
sprintf(target, "%s, %-10s: %.2f\n", "Doe", "Joe", 6.666);
puts(target);   // Doe, Joe       : 6.67

(7)
char str[30] = "3 is three";
char *ptr;
long ret = strtol(str, &ptr, 10);
printf("Num part: %4ld\n", ret);    // Num part:    3
printf("String part: |%s|", ptr);   // String part: | is three|

(8)
char s[] = "1100001 1100010 1100011";
char *token = strtok(s, " ");
char *error;
while (token != NULL) {
    unsigned int x = strtoul(token, &error, 2);
    if (*error == '\0') printf("%c", x); // abc
    token = strtok(NULL, " ");
}
