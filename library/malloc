memory allocation

malloc/calloc/realloc

- funcs to manage pool of memory (dynamic allocation)
(1) malloc(size_t size) allocates memory (memory allocate) [stdlib.h]
    - size: num of bytes of memory to be allocated
    - if success, returns address of 1st byte of that block (pointer)
    - if error, returns null-pointer (fails to find the required space)
    - allows to create arrays with different sizes during runtime (like VLA)
(2) free(void *ptr) frees memory [stdlib.h]
    - ptr: address returned earlier by malloc()/calloc()
    - each use of malloc()/calloc() should be balanced with a use of free()
(3) calloc(size_t num, size_t size) allocates memory (clear allocate) [stdlib.h]
    - num: number of memory-cells to be allocated
    - size: size of each cell in bytes
    - returns pointer to 1st mem-location (like malloc())
    - sets/clears all bits in the mem-block to 0 (unlike malloc())
    - esp. useful for allocating arrays
(4) realloc(void *ptr, size_t size) reallocates memory [stdlib.h]
    - ptr: pointer returned by malloc() or calloc()
        - realloc(NULL, size) is equivalent to malloc(size)
    - size: new mem-size to be allocated
        - realloc(prt, 0) is equivalent to free(ptr)
    - returns pointer
    - to enlarge/shrink previously allocated memory
        - maintains already present vals
            - i.e. contents identical up to lesser of new or old size
        - sets new mem-blocks to 0

- SEE ALSO
    - primer, ch.12
    - modern, lvl.2.13.1
    - beej, ch.12
    - geeksforgeeks.org/dynamic-memory-allocation-in-c-using-malloc-calloc-free-and-realloc/

EXAMPLE
(1)
int *ptr = malloc(SIZE * sizeof(int)); // (1) don't cast: (int *)
for (int i = SIZE; i > 0; i--) ptr[SIZE - i] = i;
for (int i = 0; i < SIZE; i++) printf("%d...\n", ptr[i]); // 3...
free(ptr);                                                // 2...
puts("Kaboom.");                                          // 1...
                                                          // Kaboom.
(3)
int *ptr =  calloc(SIZE, sizeof(int));
free(ptr);

(4)
int n = 2;
int *ptr = (int *) calloc(n, sizeof(int));
if (ptr == NULL) exit(0);
for (int i = 0; i < n; ++i) ptr[i] = i + 1;
for (int i = 0; i < n; ++i) printf("%d ", ptr[i]); // 1 2
puts("");
int m = n * 2;
ptr = realloc(ptr, m * sizeof(int)); // dynamically re-allocate mem
for (int i = n; i < m; ++i) ptr[i] = i + 1;
for (int i = 0; i < m; ++i) printf("%d ", ptr[i]); // 1 2 3 4
free(ptr);
