process->creation



- system calls for UNIX
(1) fork() creates a new process (almost exact copy of calling process)
    - new process starts running from fork() onwards
        - i.e. previous instructions are ignored by the new process
    - if success, returns PID of new process to caller/parent and return val of zero to child
        - allows branching and different execution for processes
    - see: man fork
(2) wait()/waitpid() allows caller to wait for a child process to finish
    - unlike fork(), deterministic execution order (since parent waits)
    - if success, returns PID of child process
    - see: man wait
(3) exec() runs process different from the calling process
    - if success, does not return anything
    - variants:
        - int execv(const char *path, char *const argv[])
        - int execvp (const char *file, char *const argv[])
        - int execvpe(const char *file, char *const argv[], char *const envp[])
        - int execl(const char *path, const char *arg,.../* (char  *) NULL */)
        - int execlp(const char *file, const char *arg,.../* (char  *) NULL */)
        - int execle(const char *path, const char *arg, .../*, (char *) NULL, char * const envp[] */)
    - see: man exec

- SEE ALSO
    - ostep,ch.5
    - /ostep-code/cpu-api

EXAMPLE
(1)
int main(int argc, char *argv[]) {
    printf("hello world (pid:%d)\n", (int) getpid());
    int rc = fork();
    if (rc < 0) {           // fork failed; exit
        fprintf(stderr, "fork failed\n");
        exit(1);
    } else if (rc == 0) {   // child (new process)
        printf("hello, I am child (pid:%d)\n", (int) getpid());
    } else {                // parent goes down this path (original process)
        printf("hello, I am parent of %d (pid:%d)\n",  rc, (int) getpid());
    }
    return 0;
}
// output (non-deterministic: either parent or child, at first):
// hello world (pid:4086)
// hello, I am parent of 4087 (pid:4086)
// hello, I am child (pid:4087)
(2)
int main(int argc, char *argv[]) {
    printf("hello world (pid:%d)\n", (int) getpid());
    int rc = fork();
    if (rc < 0) {           // fork failed; exit
        fprintf(stderr, "fork failed\n");
        exit(1);
    } else if (rc == 0) {   // child (new process)
        printf("hello, I am child (pid:%d)\n", (int) getpid());
        sleep(1);
    } else {                // parent goes down this path (original process)
        int wc = wait(NULL);
        printf("hello, I am parent of %d (wc:%d) (pid:%d)\n", rc, wc, (int) getpid());
    }
    return 0;
}
// hello world (pid:4646)
// hello, I am child (pid:4647)
// hello, I am parent of 4647 (wc:4647) (pid:4646)
(3)
int main(int argc, char *argv[]) {
    printf("hello world (pid:%d)\n", (int) getpid());
    int rc = fork();
    if (rc < 0) {           // fork failed; exit
        fprintf(stderr, "fork failed\n");
        exit(1);
    } else if (rc == 0) {   // child (new process)
        printf("hello, I am child (pid:%d)\n", (int) getpid());
        char *myargs[3];
        myargs[0] = strdup("wc");   // program: "wc" (word count)
        myargs[1] = strdup("p3.c"); // argument: file to count
        myargs[2] = NULL;           // marks end of array
        execvp(myargs[0], myargs);  // runs word count
        printf("this shouldn't print out");
    } else {                // parent goes down this path (original process)
        int wc = wait(NULL);
        printf("hello, I am parent of %d (wc:%d) (pid:%d)\n", rc, wc, (int) getpid());
    }
    return 0;
}
// hello world (pid:2163)
// hello, I am child (pid:2164)
//  32 123 966 p3.c
// hello, I am parent of 2164 (wc:2164) (pid:2163)
