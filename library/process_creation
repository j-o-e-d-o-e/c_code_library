process->creation



- system calls for UNIX
(1) fork(void) creates a new process (almost exact copy of calling process)
    - new process starts running from fork() onwards
        - i.e. previous instructions are ignored by the new process
    - if success, returns pid of new process to caller/parent and returns zero to child
        - allows branching and different executions for processes
    - see: man fork
(2) wait()/waitpid() allows caller to wait for a child process to finish
    - unlike fork(), deterministic execution order (since parent waits)
    - if success, returns pid of child process
    - see: man wait
(3) exec() runs process different from the calling process
    - if success, does not return anything
    - variants:
        - int execv(const char *path, char *const argv[])
        - int execvp (const char *file, char *const argv[])
        - int execvpe(const char *file, char *const argv[], char *const envp[])
        - int execl(const char *path, const char *arg,.../* (char  *) NULL */)
        - int execlp(const char *file, const char *arg,.../* (char  *) NULL */)
        - int execle(const char *path, const char *arg, .../*, (char *) NULL, char * const envp[] */)
    - see: man exec

- SEE ALSO
    - ostep,ch.5
    - /ostep-code/cpu-api

EXAMPLE
int main() {
    printf("main process (pid:%d)\n", (int) getpid());
    int rc = fork();
    if (rc < 0) {           // fork failed; exit
        fprintf(stderr, "fork failed\n");
        exit(1);
    } else if (rc == 0) {   // child goes down this path (new process)
        printf("child process (pid:%d)\n", (int) getpid());
        char *args[3] = {"wc", "Makefile"};
        execvp(args[0], args);
        printf("this shouldn't print out");
    } else {                // parent goes down this path (main process)
        int wc = wait(NULL);
        printf("main is now parent of %d (pid:%d)\n", wc, (int) getpid());
    }
    return 0;
}
// main process (pid:22497)
// child process (pid:22500)
// 181  591 5448 Makefile
// main is now parent of 22500 (pid:22497)
