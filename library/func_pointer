func->pointer



- typically, a pointer to a func is used as an arg to a 2nd func
    - e.g. qsort() [stdlib.h] takes a pointer-to-func to compare elems of arrays (of any type)
    - allows also to create array of func-pointers (since arr of funcs is not allowed)
- to create a pointer for a particular type of function
    - first, declare a func of the desired type, e.g. void toupper_s(char *)
    - then, replace the func-name with (*pf), e.g. void (*pf)(char *)
        - pf then becomes a pointer to that func
        - pointer holds address marking the start of the code of the func
- func may be assigned to a var of type pointer-to-func
    - pointer can point to any func with same signature (args and return type)
- two ways to call a func via a pointer
    - since (*pf) == func: use *-operator in parenthesis, e.g. (*pf)(str);
    - since func-name is a pointer (func == pf): use pointer-name, e.g. pf(str);

- SEE ALSO
    - primer, ch.14
    - beej, ch.23.6

EXAMPLE
void apply(void (*fp)(char *), char *str) {
    (*fp)(str); // apply func to str
}

// alternatively:
void apply(void fp(char *), char *str) {
    fp(str);    // since (*fp) == func
}

void toupper_s(char *s) {
    while (*s) {
        *s = toupper(*s);
        s++;
    }
}
char a[] = "joe doe";
apply(toupper_s, a);
puts(a);        // JOE DOE
char b[] = "mary jane";
void (*pf)(char *) = toupper_s;
pf(b);          // alternatively: (*pf)(str)
puts(b);        // MARY JANE
