array

data structure

- initialize
    - less data than array size: compiler initializes remaining elems to 0 (1)
    - more data than array size: error
    - designated initializer: allows to set elems at specified index (2)
    - default intializer: sets all elems to default val (3)
    - compound literals (4)
        - for providing vals that are needed only temporarily
        - typically, to pass data to func without having to create an array first
- size of array: (sizeof arr) / (sizeof arr[0])
- `const` for immutable arrays

- SEE ALSO
    - primer, ch.10
    - modern, lvl.1.6

EXAMPLE
#define  SIZE 3

int sum(const int ar[], int n) {
    int total = 0;
    for (int i = 0; i < n; i++) total += ar[i];
    return total;
}
(1)
int a[SIZE] = {6, 6};
int total = sum(a, SIZE);
printf("%d ", total); // 12

(2)
int b[SIZE] = {[1] = 6};
printf("%d ", sum(b, SIZE)); // 6

(3)
int c[SIZE] = {0};
printf("%lu ", (sizeof c) / (sizeof c[0])); // 3

(4)
int *d = (int[SIZE]) {6, 6, 7};
printf("%d ", sum(d, SIZE)); // 19
int *end = d + SIZE;
while (d < end) {
    printf("%d ", *d); // 6 6 7
    d++;
}
