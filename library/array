array

primer, ch.10/modern, lvl.1.6

(1) initialization
    - less data than array size: compiler initializes remaining elems to 0
        - therefore, shortcut `int arr[100] = {0}` sets all elems to zero
    - more data than array size: error
    - designated initializer: allows to choose specific elems (1.1)
    - in braces (default intializer): T a = {0}
(2) `const` for immutable arrays
(3) compound literals
    - means for providing values that are needed only temporarily
    - typically, to pass data to func without having to create an array first
(4) size of array
    - sizeof-operator: total size / size of any elem

EXAMPLE
(1)
#define SIZE 8
int powers[SIZE] = {1,2,4,6,8,16,32,64}; // SIZE can be omitted
(1.1)
int arr[6] = {[5] = 212}; // arr[5] to 212, uninitialized elems set to 0
(2)
int sum(const int ar[], int n); // prototype

int sum(const int ar[], int n) { // definition
    int total = 0;
    for (int i = 0; i < n; i++) total += ar[i];
    return total;
}
(3.1)
int *x = (int[2]) {10, 20}; // instead of int x[] = {10, 20 }
printf("%d\n", *x); // 10
printf("%d\n", *(x + 1)); // 20
(3.2)
int sum(const int ar[], int n) {
    int sum = 0;
    for (int i = 0; i < n; i++) sum += ar[i];
    return sum;
}
int total = sum((int[]) {4, 4, 4, 5, 5, 5}, 6);
printf("%d", total); // 27
(4)
char *c[3];
int s = (sizeof c) / (sizeof c[0]);
printf("Size of array: %d", s);
