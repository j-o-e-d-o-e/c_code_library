build->Make



- build-file: Makefile
- creates automatically object-files (built-in), e.g.
    - `make main.o` executes: cc -c -o main.o main.c
- comments: #
- indentation: tabs required (not spaces)
- Error: Makefile:<LINE>: message
- Make tracks changes upon timestamp of files
    - therefore, if Make does not detect changes, use `touch <filename>` to set new timestamp
- <target>: <dependencies>
    <commands>
- build any object-file from its source-file (built-in)
    .c.o:
        $(CC) $(CFLAGS) -c $< # alternatively: $(CC) $(CFLAGS) -c $*.c
- build any exec from its source-file
    .c:
        $(CC) $(CFLAGS) $@.c -o $@
- gcc-flags
    - `-c`: compile only, don't link
    - `-o`: specifies output-file, i.e. exec
    - `-g`: debug information

- SEE ALSO
    - tutorialspoint.com/makefile
    - devhints.io/makefile (cheat sheet)

EXAMPLE
.PHONY: tests
tests: tests.out
	@bin/$<
	@echo "Tests passed"

tests.out: $(TEST_FILES)
	@$(CC) $(CFLAGS) $^ -o bin/$@ $(LIBS)

%.o: %.c
	@echo Compiling $*
	@$(CC) $(CFLAGS) -c $^ -o $@
