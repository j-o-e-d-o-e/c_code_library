library->qsort()

primer, ch.16, beej, ch.11

qsort(): quick sort defined in [stdlib.h]
    - void qsort (void *base, size_t nmemb, size_t size, int (*compar)(const void *, const void *))
    - 1st arg (*base): pointer to beginning of array to be sorted (of any type due to void *)
    - 2nd arg (nmemb): number of items to be sorted
    - 3rd arg (size): size of the data obj, e.g. sizeof(double)
    - 4th arg ((*compar)): pointer to func to be used to determine the sorting order
        - two args: pointers to the two items being compared
        - returns positive int (if 1st item follows 2nd item), 0 (same) or neg int

EXAMPLE
(1)
#define NUM 8

void show_array(const double ar[], int n);

/* sort by increasing value */
int comp(const void *p1, const void *p2) {
    const double *a1 = p1;
    const double *a2 = p2;
    return *a1 - *a2;
//    if (*a1 < *a2) return -1; // explicitly
//    else if (*a1 == *a2) return 0;
//    else return 1;
}
int main(void) {
    double vals[NUM] = {8, 2, 7, 4, 3, 5, 1, 6};
//    for (int index = 0; index < NUM; index++) // randomly
//        vals[index] = (double) rand() / ((double) rand() + 0.1);
    puts("Random list:");
    show_array(vals, NUM);
    qsort(vals, NUM, sizeof(double), comp);
    puts("\nSorted list:");
    show_array(vals, NUM);
    return 0;
}
void show_array(const double ar[], int n) {
    for (int index = 0; index < n; index++)
        printf("%6.2f ", ar[index]);
}
(2)
#define NUM 3
void show_array();

struct name {
    char first[40];
    char last[40];
};
struct name names[NUM] = {
        {"Joe",  "Doe"},
        {"Mary", "Jane"},
        {"Jane",  "Doe"}
};
/* sort first by last name, then by first name */
int comp(const void *p1, const void *p2) {
    const struct name *ps1 = p1;
    const struct name *ps2 = p2;
    int res = strcmp(ps1->last, ps2->last); // compare last name
    if (res != 0) return res;
    else return strcmp(ps1->first, ps2->first); // last name identical, so compare first name
}
int main(void) {
    puts("\nOriginal list:");
    show_array();
    qsort(names, NUM, sizeof(struct name), comp);
    puts("\nSorted list:");
    show_array();
    return 0;
}
void show_array() {
    for (int index = 0; index < NUM; index++)
        printf("%s %s   ", names[index].first, names[index].last);
}
