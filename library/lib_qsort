lib->qsort



- quick sort defined in [stdlib.h]
- qsort(void *base, size_t n, size_t size, (*comp))
    - base: pointer to beginning of array to be sorted (of any type due to void *)
    - n: number of items to be sorted
    - size: size of the data type
    - comp: pointer-to-func to be used to determine the sorting order
        - two args: pointers to the two items being compared
        - returns positive int (if 1st item follows 2nd item), 0 (same) or neg int

- SEE ALSO
    - primer, ch.16
    - beej, ch.11

EXAMPLE
(1)
#define SIZE 3
void print(char *s, const double ar[], int n) {
    printf("%-6s: ", s);
    for (int index = 0; index < n; index++)
        printf("%.f ", ar[index]);
}
/* sort by increasing value */
int comp(const void *p1, const void *p2) {
    const double *a1 = p1;
    const double *a2 = p2;
    return *a1 - *a2;
//    if (*a1 < *a2) return -1; // explicitly
//    else if (*a1 == *a2) return 0;
//    else return 1;
}
double base[SIZE] = {3, 1, 2};
// for (int index = 0; index < SIZE; index++) // randomly
//     base[index] = (double) rand() / ((double) rand() + 0.1);
print("Input", base, SIZE);     // Input : 3 1 2
qsort(base, SIZE, sizeof(double), comp);
print("\nSorted", base, SIZE);  // Sorted: 1 2 3

(2)
#define SIZE 3
struct name {
    char first[40];
    char last[40];
};
void print(char *s, struct name *names) {
    printf("%-9s: ", s);
    for (int index = 0; index < SIZE; index++)
        printf("%4s %4s   ", names[index].first, names[index].last);
}
/* sort first by last name, then by first name */
int comp(const void *p1, const void *p2) {
    const struct name *ps1 = p1;
    const struct name *ps2 = p2;
    int res = strcmp(ps1->last, ps2->last); // compare last name
    if (res != 0) return res;
    else return strcmp(ps1->first, ps2->first); // last name identical, so compare first name
}
struct name names[SIZE] = {
        {"Joe",  "Doe"},
        {"Mary", "Jane"},
        {"Jane",  "Doe"}
};
print("\nOriginal", names);  // Original:  Joe  Doe   Mary Jane   Jane  Doe
qsort(names, SIZE, sizeof(struct name), comp);
print("\nSorted", names);    // Sorted  : Jane  Doe    Joe  Doe   Mary Jane
