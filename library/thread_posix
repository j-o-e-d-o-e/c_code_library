thread->pthread



- POSIX (Portable Operating System Interface) threads
    - CMAKE: additionally, set(CMAKE_C_FLAGS -pthread)
    - compile, e.g.
        - gcc demo.c -o demo -lpthreads -std=c11
        - gcc demo.c -o demo -lpthread
        - gcc demo.c -o demo -pthread
- defined in [pthread.h]
  - pthread_create(pthread_t *t, pthread_attr_t *a, (void *) f, void *arg)
      - t: unique identifier for new thread
      - a: attributes of newly created thread
          - if NULL, uses default vals
      - f: pointer to a func to run
      - arg: pointer to arg to pass to the func
          - if no args, set to NULL
      - if success, returns 0; otherwise non-zero
  - pthread_join(pthread_t t, void *ret)
      - t: unique identifier of thread
      - ret: return value
  - pthread_detach(pthread_t t)
      - resources of t are freed immediately when it terminates
      - instead of waiting for another thread (pthread_join())
  - pthread_exit(void *retl)
      - terminates calling thread (frees resources)
      - instead of `return 0`

- SEE ALSO
    - csc.villanova.edu/~mdamian/threads/posixthreads

EXAMPLE
(1)
#include <stdio.h>
#include <stdlib.h>
#include <assert.h>
#include <pthread.h>
#include <unistd.h>
#define NUM_THREADS 5

void *perform_work(void *arguments) {
    int index = *((int *) arguments);
    int sleep_time = 1 + rand() % NUM_THREADS;
    printf("THREAD %d: Started.\n", index);
    printf("THREAD %d: Will be sleeping for %d seconds.\n", index, sleep_time);
    sleep(sleep_time);
    printf("THREAD %d: Ended.\n", index);
    pthread_exit(NULL);
}
// $ gcc pthreads_demo.c -pthread -o pthreads_demo
// $ ./pthreads_demo
int main(void) {
    pthread_t threads[NUM_THREADS];

    int thread_args[NUM_THREADS];
    for (int i = 0; i < NUM_THREADS; i++) { //create all threads one by one
        printf("IN MAIN: Creating thread %d.\n", i);
        thread_args[i] = i;
        int result_code = pthread_create(&threads[i], NULL, perform_work, &thread_args[i]);
        assert(!result_code);
    }
    printf("IN MAIN: All threads are created.\n");

    for (int i = 0; i < NUM_THREADS; i++) { //wait for each thread to complete
        int result_code = pthread_join(threads[i], NULL);
        assert(!result_code);
        printf("IN MAIN: Thread %d has ended.\n", i);
    }
    printf("MAIN program has ended.\n");
    pthread_exit(NULL); // terminate threads
}
(2)
#include <stdio.h>
#include <pthread.h>
#include <stdlib.h>

void *run(void *data) {
    int my_data = *((int *) data);
    pthread_detach(pthread_self());
    printf("Thread: %d\n", my_data);
    pthread_exit(NULL);
}
int main(void) {
    pthread_t thread_id;
    int arg = 11;
    int res = pthread_create(&thread_id, NULL, run, &arg);
    if (res) {
        printf("Error: %d\n", res);
        exit(1);
    }
    printf("Created new thread: %lu...\n", thread_id);
    pthread_exit(NULL);
}
