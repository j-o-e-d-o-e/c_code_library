pointer

primer, ch.9/10

a variable whose val is a memory address

&-operator: address
    - to get the address of the variable
    - %p is the specifier for addresses (1)
*-operator: indirection (also called dereferencing operator)
    - to find the value stored in the variable the pointer points to
regular vs. pointer variable (1)
    - a regular-var makes the val the primary quantity and the address a derived quantity (via &-operator)
    - a pointer-var makes the address the primary quantity and the val a derived quantity (via *-operator)
    - (ptr = &var; && val = *ptr;) == (val = var)

DO NOT DEREFERENCE AN UNINITIALIZED POINTER (2)
    - uninitialized pointer has a random value
    - so, there is no knowing where assigned val will be stored
    - might overwrite data/code ...
    - pointer should be assigned a memory location that has already been allocated

EXAMPLE
(1)
int a = 5;
int *ptr = &a;
int b = *ptr;
int c = a;
printf("a: %d, b: %d, c: %d\n", a, b, c); // vals, a == b == c == 5
printf("a: %p, b: %p, c: %p\n", &a, ptr, &c); // addr, (a == b) != c
}
(2)
int * pt; // an uninitialized pointer
*pt = 5; // a terrible error: stores 5 in location to which pt points
