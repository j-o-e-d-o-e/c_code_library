pointer

operators/data type

- a variable whose val is a memory address
- &-operator: address
    - gets the address of a variable
    - printf-specifier: %p
- *-operator: indirection (also called dereferencing operator)
    - retrieves val stored in the variable the pointer points to
- regular vs. pointer variable
    - a regular-var makes the val the primary quantity and the address a derived one (via &-operator)
    - a pointer-var makes the address the primary quantity and the val a derived one (via *-operator)
    - (ptr = &var; && val = *ptr;) == (val = var)
- DO NOT DEREFERENCE AN UNINITIALIZED POINTER
    - uninitialized pointer has a random value
    - so, there is no knowing where assigned val will be stored
    - might overwrite data/code ...
    - pointer should be assigned a memory location that has already been allocated
    => ALWAYS INITIALIZE POINTERS
- assignment with 0 makes a pointer null (a null-pointer)
    - evaluates to false
    - useful if pointer does not have a valid address, yet

- SEE ALSO
    - primer, ch.9/10
    - modern, lvl.2.11

EXAMPLE
(1)
int a = 5;
int *ptr = &a;
int b = *ptr;
int c = a;
int *d = (int[3]) {a, b, c};
int *end = d + 3;
while (d < end) {
    printf("val: %d, addr: %p\n", *d, &d);  // val: 5, addr: 0x7ffe88772cf0
    d++;                                    // val: 5, addr: 0x7ffe88772cf0
}                                           // val: 5, addr: 0x7ffe88772cf0
(2)
int *pt; // an uninitialized pointer
*pt = 5; // a terrible error: stores 5 in location to which pt points
(3)
char *p = 0;
if (!p) puts("null"); // null
