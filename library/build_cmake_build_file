build->CMake->build-file



- cmake_minimum_required(): corresponds to local version, typically
    - useful if newer cmake-funcs are used
- project(): declares name of project
- add_executable(): declares name and sources of executable
- libraries
    - add_library(): declares name/target and sources of lib (in build-file of child-lib-project)
    - add_subdirectory(): adds target to its build (in build-file of parent-project)
    - target_link_libraries(): links lib-target to executable
        - needs to be below add_executable()
        - requires specifier, e.g. PRIVATE or PUBLIC
        - only required for libs not installed in /usr/local/lib/ (where cmake itself resides)
    - target_link_directories(): specifies lib's header-file-location
- install(): adds target 'install' to install executable in /usr/local/
    - therefore, globally callable on machine
- macros (${<macro>} reads its val), e.g.
    - PROJECT_NAME: defined in project()
- logic
    - if/else, e.g.
        if (NOT ${<macro>}
            message(FATAL_ERROR "Not found.")
        else()
            message(STATUS "Found as ${<macro>}!"
        endif()

EXAMPLE
cmake_minimum_required(VERSION 3.22.1)
project(Test VERSION 1.0)
set(CMAKE_C_STANDARD 11)

add_subdirectory(MathFunctions)
add_executable(${PROJECT_NAME} main.c)
target_link_libraries(${PROJECT_NAME} PUBLIC MathFunctions)
target_include_directories(${PROJECT_NAME} PUBLIC
                          "${PROJECT_BINARY_DIR}"
                          "${PROJECT_SOURCE_DIR}/MathFunctions"
                          )
