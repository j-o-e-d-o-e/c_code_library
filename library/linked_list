linked list

custom data structure

- instead of a size-fixed array
    - `next` points to next elem in list
        - so, each preceding elem stores the address of the following elem
        - if NULL, no next elem (indicating end of list)
    - `head` always points to 1st elem in list
    - `current`: walking pointer
    - `prev`: helper-pointer to the previously visited elem
- useful to allocate mem-space on demand (not in advance)
    - do not forget to counteract each malloc()-call with free()
    - in most envs though, program will free mem automatically when it terminates

- SEE ALSO
    - beej, ch.20.3
    - primer, ch.17
    - /c/linked_list
    - /c/queued_list (FIFO: add only to the end, retrieve only from beginning)

EXAMPLE
struct node {
    int data;
    struct node *next;
};

int main(void) {
    struct node *head = malloc(sizeof(struct node));
    head->data = 0;
    struct node *current = head;
    for (int i = 1; i < 4; i++) {
        current->next = malloc(sizeof(struct node));
        current = current->next;
        current->data = i;
    }
    current->next = NULL;
    current = head;
    while (current != NULL) {
        printf("%d ", current->data); // 0 1 2 3
        struct node *next = current->next;
        free(current);
        current = next;
    }
}
