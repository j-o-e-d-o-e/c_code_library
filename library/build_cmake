build->CMake



- build-file: CMakeLists.txt
- uses Make under the hood
- steps:
    (1) create build-file
    (2) create /build: mkdir build
    (3) cmake -S . -B build/
        - generates i.a. Makefile
    (4) make -C build/
        - executes Makefile (outputs exec in build/)
        - alternatively: cd build/ && make
- help: man cmake OR cmake -h
- version: cmake --version
- add libraries
    - `target_link_libraries()` always below `add_executable()`

- SEE ALSO
    - cmake.org/cmake/help/latest/guide/tutorial

EXAMPLE
cmake_minimum_required(VERSION 3.10)
project(lib)

set(CMAKE_C_STANDARD 99)
find_package(Curses REQUIRED)
include_directories(${CURSES_INCLUDE_DIR})

# $ cc main.c utils.c input-handler.c -o code_library -lncurses
add_executable(${PROJECT_NAME} main.c code-library.h utils.c)
target_link_libraries(${PROJECT_NAME} ${CURSES_LIBRARIES})
