file

I/O

- three steps
(1) fopen(const char *fn, const char *mode) opens file [stdio.h]
    - fn: address of the string containing the name of the file to be opened
    - mode: string declaring the mode to be used
        - "r": reading
        - "w": writing
            - first, truncates an existing file to zero length
            - or creates the file if it does not exist
        - "a": appending (writing)
            - appends to the end of an existing file
            - or creates the file if it does not exist
        - "r+": updating (reading and writing)
        - "w+": updating (reading and writing)
            - first, file-contents are truncated (clean slate)
            - or creates the file if it does not exist
        - "a+": updating (reading and writing)
            - whole file can be read
            - but, writing can only be appended
        - "rb", "wb", "wb+", etc: binary modes
    - returns pointer
        - if success, file-pointer of type pointer-to-FILE [stdio.h]
        - if error, null-pointer
    - freopen() associates a given stream to a different file and eventually changes the mode
        - freopen(char const *fn, char const *mode, FILE *stream)
(2) read/write
    - read: getc(FILE *stream) gets a char from specified file (like getchar())
        - stream: file to be read
        - getc(stdin) == getchar()
        - returns EOF, if end of file reached
            - discovers EOF only after trying to read past EOF
            - avoid attempting to read empty file: (ch = getc(fp)) != EOF
    - write: putc(int c, FILE *stream) puts c into stream (like putchar())
        - c: char to be written
        - stream: file to be written into
        - putc(ch, stdout) == putchar(ch)
(3) fclose(FILE *stream) closes specified file
    - stream: file-pointer
    - returns 0 (success) or EOF (error)

- SEE ALSO
    - primer, ch.13
    - modern, lvl.1.8.3

EXAMPLE
FILE *fp;
char f[] = "input.c";
if ((fp = fopen(f, "r")) == NULL) // (1)
    exit(EXIT_FAILURE);
int ch;
while ((ch = getc(fp)) != EOF)    // (2)
    putc(ch, stdout);             // (2), same as: putchar(ch);
fclose(fp);                       // (3)
