file I/O

primer, ch.13

steps 1-3:
(1) fopen() opens file [stdio.h]
    - 1st arg: address of the string containing the name of the file to be opened
    - 2nd arg: string identifying the mode
        - "r": reading
        - "w": writing
            - first, truncates an existing file to zero length
            - or creates the file if it does not exist
        - "a": appending (writing)
            - appends to the end of an existing file
            - or creates the file if it does not exist
        - "r+": updating (reading and writing)
        - "w+": updating (reading and writing)
            - first, file-contents are truncated (clean slate)
            - or creates the file if it does not exist
        - "a+": updating (reading and writing)
            - whole file can be read
            - but, writing can only be appended
        - "rb", "wb", "wb+", etc: binary modes
    - returns pointer
        - if success, file-pointer of type pointer-to-FILE [stdio.h]
        - if error, null-pointer
(2.1) getc() gets a char from specified file (like getchar())
    - arg: file to be read
    - getc(stdin) == getchar()
    - returns EOF, if end of file reached
        - discovers EOF only after trying to read past EOF
        - avoid attempting to read empty file: (ch = getc(fp)) != EOF
(2.2) putc() puts a specified char into specified file (like putchar())
    - 1st arg: char to be written
    - 2nd arg: file to be written into
    - putc(ch, stdout) == putchar(ch)
(3) fclose() closes a specified file
    - arg: file-pointer
    - returns 0 (success) or EOF (error)

EXAMPLE
FILE *fp;
char f[] = "input.c";
if ((fp = fopen(f, "r")) == NULL) // (1)
    exit(EXIT_FAILURE);
int ch;
while ((ch = getc(fp)) != EOF) // (2.1)
    putc(ch, stdout); // (2.2) same as putchar(ch);
fclose(fp); // (3)
