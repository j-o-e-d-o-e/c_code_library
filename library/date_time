date/time

built-in struct

- defined in [time.h]
(1) time_t for calendar time in secs since epoch (UTC)
    - time(time_t *t) returns current time (1.1)
        - and puts it in t, if t not NULL
    - ctime(time_t *t) returns formatted string (1.1)
        - string includes newline at the end
        - equivalent to: asctime(localtime(time_t *t))
    - localtime(time_t *t) converts time_t to struct tm in localtime (1.2)
    - gmtime(time_t *t) converts time_t to struct tm in UTC (aka GMT) (1.2)
    - difftime(time_t t1, time_t t0) subtracts t1 minus t0 (1.3)
(2) struct tm holds components of calendar time
    - int tm_sec: seconds [0, 60]
        - 60 inclusive due to leap year
    - int tm_min: minutes [0, 59]
    - int tm_hour: hours since midnight [0, 23]
    - int tm_mday: day of month [1, 31]
    - int tm_mon: month [0, 11]
    - int tm_year: years since 1900
        - therefore, subtract 1900 to get year in Gregorian calendar
    - int tm_wday: weekday since Sunday [0, 6]
    - int tm_yday: days since January, 1 [0, 365]
    - int tm_isdst: daylight saving time flag
    - asctime(struct tm *tp) returns formatted string (2.1)
        - form: "Day Mon dd hh:mm:ss yyyy\n"
    - strftime(char *s, size_t n, char *format, struct tm *tp) formats string (2.2)
        - format specifiers
            - %c: print date as per current locale
            - %A: full weekday name
            - %B: full month name
            - %d: day of the month
            - %I: hour (12 hour clock)
            - %M: minute
            - %S: second
            - %p: AM or PM
            - %F: ISO 8601 yyyy-mm-dd
            - %T: ISO 8601 hh:mm:ss
            - %z: ISO 8601 timezone offset
    - mktime(struct tm *tp) converts struct tm to time_t (2.1)
        - if success, returns struct tm according to localtime
            - sets vals for tm_wday and tm_yday automatically
            - if tm_isdst = -1, sets it automatically, as well
        - if error, returns -1
(3) struct timespec holds secs (tv_sec) and nanosecs (tv_nsec)
    - timespec_get(timespec *ts, int base) returns current time
        - base = TIME_UTC: secs since Epoch

- SEE ALSO
    - beej, ch.38
    - modern, lvl.1.5/1.6.3/1.8.5

EXAMPLE
(1.1)
time_t now;
time(&now); // alternatively: now = time(NULL)
printf("Timestamp: %ld, Formatted: %s", now, ctime(&now)); // Timestamp: 1709663025, Formatted: Tue Mar  5 19:23:45 2024
(1.2)
time_t now = time(NULL);
struct tm *now_tm = localtime(&now);
printf("Local: %s", asctime(now_tm));   // Local: Tue Mar  5 19:24:42 2024
now_tm = gmtime(&now);
printf("UTC: %s", asctime(now_tm));     // UTC: Tue Mar  5 18:24:42 2024

(2.1)
struct tm d = {.tm_year=82,
        .tm_mon=0,
        .tm_mday=3,
        .tm_hour=10,
        .tm_min=45,
        .tm_sec=30};
time_t dt = mktime(&d);
time_t now = time(NULL);
double secs = difftime(now, dt);
double days = secs / 60 / 60 / 24;
double years = days / 365.2425;
printf("I am %.2f years OR %.2f days OR %.f secs old.\n", years, days, secs);
(2.2)
char s[128];
// ISO 8601: 1982-01-03T10:45:30
strftime(s, sizeof s, "ISO 8601: %FT%T%z", &d); // ISO 8601: 1982-01-03T10:45:30+0000
puts(s);

(3)
struct timespec ts;
timespec_get(&ts, TIME_UTC);
printf("%ld secs, %ld nanosecs\n", ts.tv_sec, ts.tv_nsec); // 1709663539 secs, 877630735 nanosecs
