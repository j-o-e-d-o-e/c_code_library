bitwise operations

primer, ch.15

called bitwise, because they operate on each bit independently (of the bit to the left or right)

for ints and chars
    (1) NEGATION: unary ~-operator changes each 1 to a 0 and each 0 to a 1
        - does not change val of a var (like e.g. incrementing)
    (2) AND: binary &-operator combines two operands by bit-by-bit comparison
        - if both bits are 1, resulting bit is 1 (true)
        - otherwisse, resulting bit is 0 (false)
        - AND-assignment &=: (val &= 0377) == (val = val & 0377)
        - often used with a mask (a bit pattern)
            - e.g. #define MASK 2; flags &= MASK;
            - causes all bits of `flags` to be set to 0 (except 2nd bit from right)
            - therefore, zeros in `MASK` "hide" corresponding bits in `flags`
            - 0s in MASK are opaque, 1s are transparent (only the bits under MASKâ€™s 1s are visible)
    (3) OR: binary |-operator produces new val by bit-by-bit comparison
        - if either of the bits is 1, resulting bit is 1
        - otherwise, 0
        - OR-assignment: |=
    (4) XOR (exclusive OR): binary ^-operator (like OR and AND)
        - if one bit or the other (but not both) is 1, resulting bit is 1
        - otherwise, 0
        - XOR-assignment: ^=
    (5) LEFT SHIFT: binary <<-operator shifts bits of the left operand to the left
        - e.g. (10001010) << 2; (00101000) // resulting value
        - produces a new bit-value, but doesn't change its operands
        - number << n: multiplies number by 2 to the nth power
        - LEFT SHIFT-assignment: <<=
    (6) RIGHT SHIFT: binary >>-operator shifts bits of the left operand to the right
        - e.g. (10001010) >> 2; (00100010) // resulting value
        - bits moved past the right end of the left operand are lost
        - number >> n: divides number by 2 to the nth power (if number not negative)
        - RIGHT SHIFT-assignment: >>=

EXAMPLE
(1)
unsigned char x = 2;
unsigned char y = ~x;
printf("x: %d, y: %d\n", x, y); // x: 2, y: 253
(5)
int z = 1;
z <<= 2; // changes z to 4
