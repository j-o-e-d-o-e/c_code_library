bitwise operations

operators

- called bitwise, because they operate on each bit independently (of bits to the left and right)
- operators for ints and chars
(1) NEGATION: ~
    - each 1-bit results in a 0-bit and each 0-bit in a 1-bit
    - the only unary operator in this list; others take two operands
(2) AND: &
    - if both bits are 1, resulting bit is 1; otherwise, resulting bit is 0
    - AND-assignment: &=
    - often used with a mask (a bit pattern)
        - e.g. #define MASK 2; flags &= MASK;
        - causes all bits of `flags` to be set to 0 (except 2nd bit from right)
        - therefore, zeros in `MASK` "hide" corresponding bits in `flags`
        - 0s in MASK are opaque, 1s are transparent (only the bits under MASKâ€™s 1s are visible)
(3) OR: |
    - if either of the bits is 1, resulting bit is 1; otherwise, 0
    - OR-assignment: |=
(4) XOR (exclusive OR): ^
    - if one bit or the other (but not both) is 1, resulting bit is 1; otherwise, 0
    - XOR-assignment: ^=
(5) LEFT SHIFT: <<
    - shifts bits of the left operand to the left by n places
    - number << n: multiplies number by 2**n
    - LEFT SHIFT-assignment: <<=
(6) RIGHT SHIFT: >>
    - shifts bits of the left operand to the right
    - bits moved past the right end of the left operand are lost
    - number >> n: divides number by 2**n (if number not negative)
    - RIGHT SHIFT-assignment: >>=

- SEE ALSO
    - primer, ch.15

EXAMPLE
// helper: int/char to bin representation
char *itob(unsigned char c) {
    char *dest = malloc((8 + 1) * sizeof(char));
    int count = 8;
    while (count > 0) {
        count--;
        if (c & 1) dest[count] = '1';
        else dest[count] = '0';
        c >>= 1;
    }
    dest[8] = '\0';
    return dest;
}
(1)
unsigned char x = 'A';
char *bin_x = itob(x);
unsigned char y = ~x;
char *bin_y = itob(y);
printf("x: %s/%3d\ny: %s/%3d\n", bin_x, x, bin_y, y);   // x:  1000001/ 65
                                                        // y: 10111110/190
free(bin_x);
free(bin_y);
(2)
int x = 6;
char *bin_x = ctob(x);
int y = 3;
char *bin_y = ctob(y);
int z = x & y;
char *bin_z = ctob(z);
printf("x: %s/%d\ny: %s/%d\nz: %s/%d\n", bin_x, x, bin_y, y, bin_z, z); // x: 00000110/6
                                                                        // y: 00000011/3
                                                                        // z: 00000010/2
free(bin_x);
free(bin_y);
free(bin_z);
(5)
int x = 3;
char *bin_x = ctob(x);
int y = x << 3;
char *bin_y = ctob(y);
printf("x: %s/%d\ny: %s/%d\n", bin_x, x, bin_y, y); // x: 00000011/3
                                                    // y: 00011000/24
free(bin_x);
free(bin_y);
