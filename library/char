char

built-in funcs/data type

- funcs can't be applied to a string as a whole, but to the individual chars in a string
(1) toupper(int c) returns c in uppercase [ctype.h]
    - tolower(int c) returns c in lowercase
(2) getchar() returns a char read from stdin [stdio.h]
    - one char at a time (like putchar() for output)
        - including every char: spaces, tabs, newlines
    - interprets each incoming byte as a char-code (ASCII)
    - returns EOF, when end of file reached
        - typically defined as `#define EOF (-1)` [stdio.h]
        - on Unix/Linux, Ctrl+D at beginning of a line causes EOF-signal to be transmitted
(3) putchar(int c) writes a char to stdout and returns written char [stdio.h]
    - if error, returns EOF
(4) isalpha(int c) checks if c is an alphabetic char [ctype.h]
    - int isalnum(int c);
    - int isdigit(int c);
    - int islower(int c);
    - int isupper(int c);
    - int isspace(int c);
    - int isblank(int c);
(5) fgetc(FILE *stream)/fputc(int c, FILE *stream) read/write char from/to stream [stdio.h]
    - designed for file output

- SEE ALSO
    - primer, ch.8/11
    - modern, lvl.1.8.4

EXAMPLE
(1)
void toupper_s(char *s) {
    while (*s) {    // exits, if s == \0 (false)
        *s = toupper(*s);
        s++;
    }
}
char s[] = "joe doe";
toupper_s(s);
printf("%s", s);    // JOE DOE
(2)
int ch;
while ((ch = getchar()) != EOF)
    putchar(ch);
(3)
char ch[] = {'J','o','e'};
for (int i = 0; i < (sizeof ch) / (sizeof ch[0]); i++)
    putchar(ch[i]); // Joe
